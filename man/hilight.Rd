% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/highlight.R
\name{hilight_term}
\alias{hilight_term}
\alias{hilight_token}
\alias{hilight_sentence}
\title{Highlight Text}
\usage{
hilight_term(text.var, map, grouping.var = NULL, ignore.case = TRUE,
  keep.row.order = FALSE, ...)

hilight_token(text.var, map, grouping.var = NULL, ignore.case = TRUE,
  keep.row.order = FALSE, ...)

hilight_sentence(text.var, map, grouping.var = NULL,
  first.appearance = TRUE, ignore.case = TRUE, keep.row.order = FALSE,
  ...)
}
\arguments{
\item{text.var}{The text string variable.}

\item{map}{A named list or two column dataframe.  For lists the names are colors
and the vectors are the conditional matches.  For dataframes the first column
is a color and the secon is the match condition.}

\item{grouping.var}{The grouping variable(s).  Default \code{NULL} generates
one plot for all text.  Also takes a single grouping variable or a list
of 1 or more grouping variables.}

\item{ignore.case}{logical.  If \code{FALSE}, the pattern initial matching is
case sensitive and if \code{TRUE}, case is ignored during initial matching.}

\item{keep.row.order}{logical.  If \code{TRUE} the \code{grouping.var}
argument is used for headings but the row text is not collapsed within the
\code{grouping.var}.  This produces transcript like formatting.}

\item{first.appearance}{logical.  If \code{TRUE} the first regex that matches
a sentence will be applied, otherwise the last matching regex will be applied.}

\item{\ldots}{ignored.}
}
\description{
\code{hilight_term} - Highlight regex matching substrings.

\code{hilight_token} - Highlight matching tokens.

\code{hilight_sentence} - Highlight matching sentences.
}
\examples{
\dontrun{

## highlight regex expressions
map1 <- list(
    `#FF69B4` = c('\\\\bwe(\\'[a-z]+)?\\\\b'),
    `#7CFC00` = c('\\\\bhe is', "he's"),
    yellow = 'you(\\'(ll|[vr]e))?\\\\b',
    gray70 = '\\\\btalk'
)

term_regex <- with(presidential_debates_2012,
    hilight_term(dialogue, map1, list(person, time)))

plot(term_regex)

## Keep row order
term_regex <- with(presidential_debates_2012,
    hilight_term(dialogue, map1, list(person, time), keep.row.order = TRUE))

plot(term_regex)

## tidier
library(tidyverse)

map1B <- list(
    `orange` = c('\\\\bwe(\\'[a-z]+)?\\\\b'),
    `pink` = c('that[\\'a-z]*\\\\b'),
    yellow = 'you(\\'(ll|[vr]e))?\\\\b',
    gray = '\\\\bI\\\\b'
)

presidential_debates_2012 \%>\%
    dplyr::filter(person \%in\% c('ROMNEY', 'OBAMA')) \%$\%
    hilight_term(
        text.var = dialogue,
        map = map1B,
        grouping.var = person
    ) \%>\%
    plot()

## highlight tokens
map2 <- list(
    `#FF69B4` = c('talk', 'you'),
    `#7CFC00` = c('he', "he's", 'we\\'re', 'we'),
    yellow = 'right',
    gray70 = c('.', '?', '!')
)

token_match <- with(presidential_debates_2012,
    hilight_token(dialogue, map2, list(person, time)))

plot(token_match)


## highlight sentences regex
map3 <- list(
    `#FF69B4` = 'think',
    `#7CFC00` = c('he is', "he's", 'you(\\'[vr]e)?\\\\b')
)


sent_regex <- with(presidential_debates_2012,
    hilight_sentence(dialogue, map3, list(person, time)))

plot(sent_regex)

## highlight sentences index
set.seed(10)
map_index <- list(
    yellow = sample(1:2912, 200),
    orange = sample(1:2912, 200),
    `#ff69b4` = sample(1:2912, 200)
)

map_index[[2]] <- map_index[[2]][!map_index[[2]] \%in\% map_index[[1]]]
map_index[[3]] <- map_index[[3]][!map_index[[3]] \%in\% unlist(map_index[1:2])]


sent_index <- with(presidential_debates_2012,
    hilight_sentence(dialogue, map_index, list(person, time)))

plot(sent_index)

}
}
